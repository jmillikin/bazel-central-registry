SKIP_BUILD_FAILURE = [
    # bazel_dep(name = "pcre2", version = "10.43") doesn't have JIT support
    "autoptr",
    "regex",

    # win32
    "spawn-test-win32-gui",
    "win32",
    "gpoll",
]

SKIP_TEST_FAILURE = [
    # platform-specific dynamic library loading
    "constructor",

    # asserts test data isn't a symlink
    "fileutils",

    # requires LD_PRELOAD
    "gutils-user-database",

    # asserts $G_TEST_SRCDIR is an absolute path
    "gdatetime",
]

TEST_HELPER_SRCS = [
    "assert-msg-test.c",
    "constructor-helper.c",
    "getpwuid-preload.c",
    "messages-low-memory.c",
    "path-test-subdir/spawn-test-helper.c",
    "spawn-path-search-helper.c",
    "spawn-test-helper.c",
    "test-spawn-echo.c",
    "test-spawn-sleep.c",
    "testing-helper.c",
]

TEST_SRCS = glob(
    ["*.c"],
    exclude = TEST_HELPER_SRCS,
)

[cc_binary(
    name = helper_name,
    srcs = [helper_name + ".c"],
    local_defines = [
        "_GNU_SOURCE",
        "G_LOG_DOMAIN='\"GLib\"'",
    ],
    deps = [
        "//:config_h",
        "//glib",
    ],
) for helper_name in [
    "testing-helper",
    "test-spawn-echo",
    "test-spawn-sleep",
    "spawn-test-helper",
    "spawn-path-search-helper",
    "path-test-subdir/spawn-test-helper",
]]

TEST_DATA = glob(
    ["**/*"],
    exclude = ["BUILD.bazel"],
)

TEST_DATA_BINS = {
    "testing": [":testing-helper"],
    "spawn-multithreaded": [
        ":test-spawn-echo",
        ":test-spawn-sleep",
    ],
    "spawn-singlethread": [":test-spawn-echo"],
    "spawn-path-search": [
        ":spawn-test-helper",
        ":spawn-path-search-helper",
        ":path-test-subdir/spawn-test-helper",
    ],
}

TEST_PLATFORMS = {
}

constraint_setting(
    name = "skip_reason",
)

constraint_value(
    name = "skip_build_failure",
    constraint_setting = ":skip_reason",
)

constraint_value(
    name = "skip_test_failure",
    constraint_setting = ":skip_reason",
)

TEST_PLATFORMS.update([
    (
        test_name,
        [":skip_build_failure"],
    )
    for test_name in SKIP_BUILD_FAILURE
])

TEST_PLATFORMS.update([
    (
        test_name,
        [":skip_test_failure"],
    )
    for test_name in SKIP_TEST_FAILURE
])

GLIB_TESTS = [{
    "name": test_src.replace(".c", ""),
    "srcs": [test_src],
    "platform": TEST_PLATFORMS.get(
        test_src.replace(".c", ""),
        [],
    ),
} for test_src in TEST_SRCS]

REPO = repo_name()

G_TEST_SRCDIR = "../%s/glib/tests" % (REPO,) if REPO else "glib/tests"

[cc_test(
    name = test["name"],
    size = "small",
    srcs = test["srcs"] + ["testutils.h"],
    data = TEST_DATA + TEST_DATA_BINS.get(
        test["name"],
        [],
    ),
    env = {
        "G_TEST_SRCDIR": G_TEST_SRCDIR,
    },
    local_defines = [
        "_GNU_SOURCE",
        "G_LOG_DOMAIN='\"GLib\"'",
    ],
    target_compatible_with = test["platform"],
    deps = [
        "//:config_h",
        "//glib",
        "//glib:glib_hdrs_iquote",
    ],
) for test in GLIB_TESTS]
